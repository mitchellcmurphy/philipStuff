if (right_->priority() > priority())
					{
						Node* temp = new Node();
						Node* y = right_;
						Node* T2 = y->left_;

						y->left_ = temp;

						right_ = T2;
						key_ = y->key_;
						value_ = y->value_;
						priority_ = y->priority_;
						left_ = y->left_;
						right_ = y->right_;
					}


// rotate
			/*if (right_)
			{
				if (right_->priority() > priority())
				{
					Node* temp = this;
					value_ = right_->value();
					key_ = right_->key();
					priority_ = right_->priority();


				}
			}*/

			calls--;
			std::cout << "calls: " << calls << " " << "max calls: " << max_calls << std::endl;

			calls--;
			std::cout << "calls: " << calls << " " << "max calls: " << max_calls << std::endl;

if (ptr->left_)
	{
		if (ptr->left_->priority_ > ptr->priority_)
		{
			ptr = rotate_right(ptr);
		}
		rebalance(ptr->left_);
	}
	if (ptr->right_)
	{
		if (ptr->right_->priority_ > ptr->priority_)
		{
			ptr = rotate_left(ptr);
		}
		rebalance(ptr->right_);
	}