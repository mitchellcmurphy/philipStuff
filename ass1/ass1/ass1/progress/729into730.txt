Reversing the lookup function so it checks right first instead of left actually did not work. Output is still 1 line.

Tree is correct. root + 9 more node all to the right

1.) for (auto& item : count)

2.) BST::Iterator BST::begin() {
        return Iterator(root_);
    }

3.) return Iterator(root_);

4.) BST::Iterator::Iterator(BST::Node* root) {
	if (!root) {
		current_ = nullptr;
		return;
	}
	leftmost(root);
	current_ = stack_.top();
	stack_.pop();
    }

THIS IS THE FIRST ITERATION
AND THERE IS A ROOT

5.) void BST::Iterator::leftmost(BST::Node* p) {
	while (p) {
		stack_.push(p);
		p = p->left();
	}
    }

p IS ROOT
FIRST TIME HITTING THIS WITH A SORTED LIST AND FIRST THING PASSED TO IT IS ROOT
so p is satisfied
we push root to the stack

????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

p = p->left();
we then set p to p->left(), but since this tree only goes right, there are no left values ever.

????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????













